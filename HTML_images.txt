HTML IMAGES:

	Images can improve the design and the apperance of a web page.
	You have to use <img> tag and the "src" and "alt" attributes to locate and add a desrciption to the file.
	
	"src":
	
		source path, can be simply the title of the image if it is located into the main folder or can be
		in another folder and you have to specify the precise path. You can use also an image on another
		server/website. In this last case you have to point to that image, and use the image url in the "src" attribute.
	"alt":
	
		allow you to add a description to the image if this one can't be displayed.
		
	You can also use animated images (GIFs) simply linking a GIF.
	You can use an image as a link, putting the <img> inside the <a> tag.
	Example:
	
		<a href="default.asp">
		  <img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;">
		</a>

	IMAGE FLOATING:
	
		 you can use the CSS property to let the image float to the right or to the left of a text.
		 Example:
		 
			<p><img src="smiley.gif" alt="Smiley face" style="float:right;width:42px;height:42px;">
			The image will float to the right of the text.</p>
		
	IMAGE MAPS:
		
		The HTML <map> tag defines an image map. An image map is an image with clickable areas.
		The areas are defined woth one or more <area> tags.
		Example:
				
			<img src="workplace.jpg" alt="Workplace" usemap="#workmap">

			<map name="workmap">
			  <area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
			  <area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
			  <area shape="circle" coords="337,300,44" alt="Coffee" href="coffee.htm">
			</map>	
			
		You can perform different acrion depending on where in the image you click.
		To create an image map you need an image and some HTML code that describes the clickable areas.
		
		The usemap value starts with a hash tag # followed by the name of the image map,
		and is used to create a relationship between the image and the image map.
		
		The usemap value starts with a hash tag # followed by the name of the image map,
		and is used to create a relationship between the image and the image map.
		
		A clickable area is defined using an <area> element.
		
		You must define the shape of the clickable area, and you can choose one of these values:

			rect - defines a rectangular region:
				The coordinates for shape="rect" come in pairs, one for the x-axis and one for the y-axis.
			circle - defines a circular region:
				To add a circle area, first locate the coordinates of the center of the circle, then specify the radius.
			poly - defines a polygonal region:
				We have to find the x and y coordinates for all edges of the figure.
			default - defines the entire region
		
		You must also define some coordinates to be able to place the clickable area onto the image.
		A clickable area can also trigger a JavaScript function.
		Add a click event to the <area> element to execute a JavaScript function.
		Example:
		
			<map name="workmap">
			  <area shape="circle" coords="337,300,44" href="coffee.htm" onclick="myFunction()">
			</map>

			<script>
			function myFunction() {
			  alert("You clicked the coffee cup!");
			}
			</script>
		
		
	BACKGROUND IMAGES:
		To add a background image on an HTML element, use the HTML style attribute and the CSS background-image property:
		Example:
		
			<div style="background-image: url('img_girl.jpg');">
		
		If you want the entire page to have a background image, you must specify the background image on the <body> element
		Example:
			
			<style>
			body {
			  background-image: url('img_girl.jpg');
			}
			</style>
		
		If the background image is smaller than the element, the image will repeat itself, horizontally and vertically,
		until it reaches the end of rhe element. To avoid the background image from repeating itself,
		set the background-repeat property to no-repeat. If you want the background image to cover the entire element,
		you can set the background-size property to cover. Also, to make sure the entire element is always covered,
		set the background-attachment property to fixed.
		Example:
			
			<style>
			body {
			  background-image: url('img_girl.jpg');
			  background-repeat: no-repeat;
			  background-attachment: fixed;
			  background-size: cover;
			}
			</style>

		This way, the background image will cover the entire element, with no stretching (the image will keep its original proportions):
		
			
		
		